/*=============================================================================
# Filename:		even_fibonacci.cpp
# Author: Bookug Lobert 
# Mail: zengli-bookug@pku.edu.cn
# Last Modified:	2018-04-16 16:58
# Description: 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
=============================================================================*/

#include <iostream>
#include <sys/time.h> 

using namespace std;

//#define LIMIT 1000
//typedef int RESULT_TYPE;
#define LIMIT 4000000
typedef long RESULT_TYPE;

long get_cur_time()
{
	timeval tv;
	gettimeofday(&tv, NULL);
	return (tv.tv_sec*1000+tv.tv_usec/1000);
}

int main()
{
	RESULT_TYPE result = 2;
	long begin = get_cur_time();

	int prev = 2, cur = 3, tmp;
	while(cur <= LIMIT)
	{
		if(cur % 2 == 0)
		{
			result += cur;
		}
		tmp = cur;
		cur = prev + cur;
		prev = tmp;
	}

	//METHOD: only add every third number and no need to do even test
	//1 1 (2) 3 5 (8) 13 21 (34) 55 89 (144) ...
	//PROVE: only every third number is even, this property can be proved using mathematical induction
	//
	//If we only write the even numbers:
	//2  8 34 144 ...
	//it seems that they obey the following recursive relation: E(n)=4*E(n-1)+E(n-2).
	//If we can prove that for the Fibonacci numbers the formula F(n)=4*F(n-3)+F(n-6) (just a sufficient condition) 
	//holds we have proven this recursion.(The answer is YES)
	//
	//After we get the right formula, actually we can derive the general term formula of E(n) and count the sum using mathematical method
	//(This will be very fast)

	long end = get_cur_time();
	cout<<result<<endl;
	cout<<"time: "<<(end-begin)<<" ms"<<endl;

	return 0;
}

